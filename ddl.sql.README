# Database Schema and Data Script (ddl.sql)

This script contains the Data Definition Language (DDL) to create the tables for the game application database based on the provided Entity-Relationship Diagram (ERD), and Data Manipulation Language (DML) to populate these tables with dummy data.

## Table Names

All table names are in **lowercase** and **plural** form as per the requirements.

## Table Structure

The script defines the following tables:

* users
* customers
* developers
* achievements
* userachievements
* gameservers
* genres
* games
* userlibrary
* purchases
* gamereviews

## Important Considerations

* IDENTITY Columns: Tables with id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY have their id values automatically generated by Oracle. You should not provide id values for these tables in INSERT statements.
* Foreign Key Dependencies: The DML section handles the insertion order carefully, especially for customers and developers tables, which derive their id from the users table's generated IDs. A PL/SQL block is used to manage this.
* Reserved Keyword: The LEVEL column in the customers table was renamed to customer_level to avoid conflict with Oracle's reserved keyword.

## How to Use

1.  Prepare Your Oracle Environment:
    * Connect to your Oracle database as a privileged user (e.g., SYSTEM or SYS AS SYSDBA).
    * Create a dedicated user/schema for this application if you haven't already. For example:
        CREATE USER game_app_user IDENTIFIED BY YourSecurePassword123
        DEFAULT TABLESPACE users
        TEMPORARY TABLESPACE temp
        QUOTA UNLIMITED ON users;

        GRANT CONNECT, RESOURCE, CREATE VIEW, CREATE SESSION, UNLIMITED TABLESPACE TO game_app_user;
    * Commit the user creation: COMMIT;

2.  Connect as the Application User:
    * Connect to your Oracle database using the newly created user (e.g., game_app_user):
        CONNECT game_app_user/YourSecurePassword123@your_service_name

3.  Run the Script:
    * Save this script as ddl.sql.
    * Execute the script in your Oracle client (e.g., SQL Developer, SQL*Plus) by typing @ddl.sql or running it directly from the IDE.

## Verification

After running, you can use the display_data.sql script (if available) or individual SELECT * FROM table_name; queries to verify that tables are created and populated with data.